Заемчания:
_1. Оформление кода
!?_1.1. Неверно оформлены комментарии. Больше информации http://msdn.microsoft.com/ru-ru/library/b2s063f7.aspx
Вместо 
	/// Класс для хранения и обработки массива.
Надо писать 		
	/// <summary>
        /// Класс для хранения и обработки массива.
	/// </summary>
Re: Исправил. Если я правильно понял из увиденных примеров, если метод имеет комментарии в описывающем его интерфейсе, то в реализации он не комментируется?
!ReRe: Есть разные мнения по этому поводу, комментарий с xml тегами нужен для того чтобы во-первых собирать автоматически хелп и во-вторых для того чтобы программисту кто будет использовать объект интеллисенс студии показывал описание свойства или метода. Исходя из этого лучше делать комментарии во всех публичных реализаций интерфейса, иначе просто чтобы почитать описание нужно будет залазить через объект в интерфейс.


+_1.2. Опять открывающая фигурная скобка на той же строке что и оператор. В студии можно выставить стили оформления кода. Возможно у Вас стоит не стиль по умолчанию для C#.
Вместо
	static void Main() {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new FormView());
        }
надо писать 
	static void Main() 
	{
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new FormView());
        }
Re: Исправил, действительно стояли Java-подобные настройки по умолчанию.

+_1.3. Класс Pointer. Функция public void DoMagic() может кинуть исключение MissingMemberException("Enum do not contains such element"); Необходимо написать об это в комментарии к функции используя теги <exception>
Re: Добавил комментарии с указанным тегом.

+_1.4. Все объекты интерфейса должны иметь имена соответствующие их функциональной нагрузке 
вместо 
	button3
	private void button3_Click(object sender, EventArgs e)
надо писать 
	buttonSelectFile
	private void buttonSelectFile_Click(object sender, EventArgs e)
Re: Переименовал объекты.

_!?_2.1. Необходимо разделить логику хранения настроек и сериализации/десериализации настроек в объекте Settings. Класс Settings должен быть помечен атрибутом [Serializable], свойства должны быть помечены аттрибутом [XmlElement]
Re: Реализовал. Не совсем уверен, что правильно понял относительно разделения логики.
!ReRe: Да ответом на это замечание должно было бы быть реализация отдельного объекта, который бы мог сериализовывать/десериализовывать любые объекты помеченные атрибутами [Serializable] вызывая стандартный xmlserializer. Этим Объектом необходимо было воспользоваться в функции Main() до Application.Run(view); для того чтобы загрузить настройки и после для того чтобы сохранить настройки. Функции SaveAppSettings() и LoadAppSettings() необходимо убрать из объекта Settings. Смотри пример такого объекта в файле Serializer.cs

_!?_2.2. Сохранять и загружать настройки необходимо в объекте Program в функции Main(). 
Re: Реализовал, однако не могу понять, почему бы не сохранять/загружать настройки в Presentere, где обрабатываются другие события. Сохранить настройки без использования события Closing не получилось. Загрузку настроек тоже сделал через событие для единства стиля.
!ReRe: См ответ на 2.1

+_2.3. Необходимо обеспечить доступ к настройкам из любого объекта приложения. Для этого лучше всего подойдет паттерн проектирования Singleton (http://ru.wikipedia.org/wiki/Singleton)
Re: Переделал класс Settings в простой синглтон.

+_2.4. Для склеивания пути есть стандартная функция System.IO.Path.Combine()
Вместо 
	Application.CommonAppDataPath  + @"\app.config"
надо писать 
	System.IO.Path.Combine(Application.CommonAppDataPath, "app.config")
Re: Исправил, теперь используется стандартная функция.

+_2.5. Непонятно зачем нужен флаг _appSettingsChanged. Если это флаг для изменения свойств настроек, то он работает некорректно, так как только один раз имеет состояние false.
Логика необходимости сохранения настроек в файл должна быть вынесена за контект сомого объекта Settings.
Re: Флаг предполагался для сохранения настроек только в случае их изменения. Убрал за ненадобностью.

+_2.6. Проверка на корректность ввода имени файла должна быть такой 
вместо 
	if (textBox1.Text.Length < 1)
надо писать 
	if (string.IsNullOrEmpty(textBox1.Text))
Re: Исправил.

_!_2.7. Необходимо убрать отладочную кнопку "Сохранить". Надо стараться избегать загромождения интерфейса. Логику сохранения в файл необходимо внести на кнопку "Построить".
Re: Реализовал логику сохранения на кнопке построить через диалог.
!ReRe: Надо стараться избегать диалоговых окон, так как они мешают процессу запуска автоматизированных тестов. Тут лучше просто всегда сохранять в файл если он задан.

_!_2.8. Необходимо переработать объект DataGridViewPrinter. Удалить функцию GetMainForm(). Удалить MyDataGrid из FormView. Использовать паттерн проектирования Dependency injection (DI) (подробнее http://ru.wikipedia.org/wiki/%C2%ED%E5%E4%F0%E5%ED%E8%E5_%E7%E0%E2%E8%F1%E8%EC%EE%F1%F2%E8 ). Для этого сделать публичное свойство в объекте DataGridViewPrinter типа DataGridView. Логику инициализации вынести на уровень выше в контекст FormView, который использует объект DataGridViewPrinter.
Re: Реализовал DI паттерн.  MyDataGridView из FormView не удалил в связи c имплементацией паттерна MVP. См. ниже.
!ReRe: Функция void Print(SnakeModel model): если обработка ошибок ничем не отличается друг от друга, то лучше обрабатывать не каждую типизированную ошибку а любую ошибку без типа конструкцией try { ... } catch { }


+_2.9. Аналогично(2.8) для объекта FilePrinter сделать свойство путь к файлу в качестве общедоступного свойства и инициализировать его перед вызовом функции Print.
Re: Аналогично.

+_2.10. Не исправлено замечание 4 про использование GetUpperBound. Необходимо избавится от использования этой функции. Для этого лучше всего реализовать свой объект описывающий двумерный массив со свойствами N и M.
Re: Исправил. Создал объект модели SnakeМodel с соответствующими свойствами.


Задания
+_1. Реализовать лог работы программы с использованием библиотеки логирования NLog (http://nlog-project.org/)
Re: Лог реализован.

+_1.1. Лог программы хранить в той же дирректории, что и настройки
Re: Здесь пришлось вставить костыль - не нашел способа в конфигурации лога указать тот же путь, что генерится для CommonAppDataPath. :(
!ReRe: Да есть такая проблема, что конфиг nlog хочет статический путь для хранения лога. Решение принимается.

+_1.2. Внести в лог все действия пользователя, включая начало работы программы и выход из программы, ошибочные действия пользователя и т.д.
Re: Все действия логируются в соответствии с уровнями.

+_2. Переработать код программы в соответствии с паттерном Model-View-Presenter (MVP) (подробнее http://habrahabr.ru/post/211899/ )
Re: Паттерн MVP реализовал. Так же посчитал целесообразным использовать Unity Framework в качестве IoC контейнера.
ReRe: Хорошо что вы пошли чуть дальше задания, но пока не стоит пользоваться сторонними фреймворками для DI.