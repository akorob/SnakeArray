Замечания:
_1. При передачи (заливки в репозиторий) проекта необходимо, чтобы он был самодостаточным и компилировался без установки сторонних программ. В переданном вами проекте есть зависимость от библиотек Microsoft.Practices.Unity и Microsoft.Practices.Unity.Configuration и без них проект не компилируется.
Re: Исправил, все сторонние библиотеки в папке lib.

_1.1. ISnakeService неверно оформлены комментарии.
        /// Заполняет массив "змейкой".
        /// <exception cref="MissingMemberException">
        /// Неверное использование перечисления Direction
        /// </exception>
        SnakeModel CalculateModel(int numColumns, int numRows);
надо писать 
	/// <summary>
        /// Заполняет массив "змейкой".
        /// </summary>
        /// <param name="numColumns"></param>
        /// <param name="numRows"></param>
        /// <returns></returns>
        /// <exception cref="MissingMemberException">
        /// Неверное использование перечисления Direction
        /// </exception>
        SnakeModel CalculateModel(int numColumns, int numRows);
_1.2 Отсутствуют комментарии в классе SnakeModel.
1.3. 
Re: Комментарии исправил везде по приложению.

2. Объект  DataGridViewPrinter.
_2.1. Объект  DataGridViewPrinter имеет зависимость от конкретной реализации контрола DataGridView, тоесть от WinForms. Поэтому логичнее его разместить в папке View с реализацией интерфейса.
Re: Объект DataGridViewPrinter переместил. 

_2.2. Объект SnakePresenter должен работать только с интерфейсом IPrinter и не должен ничего знать о конкретной реализации DataGridViewPrinter. ISnakeView это базовый интерфейс представления и он ничего не должен знать о конкретной реализации DataGridView. Необходимо сделать функцию GetViewPrinter в интерфейсе ISnakeView. В объекте SnakeFormView уже будет реализована функция GetViewPrinter где будет создаваться DataGridViewPrinter и возвращаться по интерфейсу IPrinter.
Re: Переделал, класс SnakeFormView реализует метод возвращающий объект DataGridViewPrinter.


3. SnakePresenter.
_3.1. Инициализация класса должна происходить в конструкторе. В MVP презентер не должен быть создан без представления и модели данных. Необходимо удалить метод SetView а его содержимое перенести в конструктор объекта. Переменная _view должна быть readonly.
Re: Переделал, теперь инжекция в конструктор. SnakePresenter создается на основе представления SnakeFormView, сервис объекта Snakeservice и модели Settings.

_3.2. При работе с событиями необходимо не только знать когда надо подписаться на события, но и так же надо знать когда надо отписаться от событий. Если вдруг объект, который генерирует события нужно будет удалить а на его события будут подписчики, то он будет жить до тех пор пока не будет удален подписчик. Необходимо реализовать в объекте SnakePresenter интерфейс IDisposable и в методе Dispose() отписаться от всех событий представления 
(
пример отписывания от события 

_view.BuildClicked -= OnBuildClick;

).
Так же лучше не использовать записи типа 
_view.FileSelectClicked += new EventHandler<EventArgs>(OnFileSelectClick);

вместо этого можно просто писать 
_view.FileSelectClicked += OnFileSelectClick;

Рекомендую так же вынести подпись на события в отдельную функцию например SignViewEvents() и отписывание от событий в функцию UnSignViewEvents()
Re: Реализовал интерфейс и функции.

_3.3. По поводу использования сторонних библиотек для DI. Мы стараемся не использовать сторонние фреймворки для такого простого механизма как внедрения зависимости или сервис локатора, так как объекты там непонятно когда создаются, плюс скорее всего там будет использоваться рефлексия для создания объекта и могут возникнуть проблемы с инициализацией сомих объектов если конструктор объекта будет иметь вхоные параметры. Необходимо Определить место когда и где будет создан объект SnakeService + Задача отказаться от использвания сервис локатора (IUnityContainer container).
Re: DI фреймворк более не используется.

4. MVP. 
_4.1. SnakeFormView не должен иметь ссылку на SnakePresenter, так как он общается с презентером по средством генерации событий на которые подписывается презентер. Тем более что реализации View могут находиться вообще в других сборках.
Re: Ссылка удалена за ненадобностью после отказа от DI фреймворка

_4.2. По сути SnakeModel не является моделью данных. Это промежуточный объект описывающий результирующий массив. Тут модель данных скорее всего это настройки Settings. Переименовать SnakeModel в ArrayInfo.
Re: Да, действительно, массив это результат работы, далее нигде не обрабатывается. Данными его считать не совсем верно. Переименовал. 

_4.3. Переработать метод Main(). Создать тут (вручную) объект представления, объект презентера, объект модели данных, все необходимые объекты логики, которыми оперирует презентер (SnakeService).
Re: Переработал.  SnakePresenter создается конструктором на основе представления SnakeFormView, сервис объекта Snakeservice и модели Settings.


Задания:
_0. Исправить по оветам на вопросы все замечания из файла error&tasks.txt (задачи помечены '!').
Re: Убрал диалоговые окна, минимизировал количество Messagebox. Реализовал объект Serializer для сериализации-десериализации настроек. В объекте Programm ПОСЛЕ Application.run(view) свойство FilePath дает пустую строку, полагаю соответствующий элемент textBox к этому времени уже уничтожен. Потому присвоение настроек полям объекта Settings происходит по событию FormClosing в презентере.   

1. Разделить проект SnakeArrayV2 на 2 проекта. Первый проект (назовем его Core - ядро) будет содержать презентер и все базовые интерфейсы, второй проект назовем его UserInterfaceWinForms должен содержать реализацию представления. Таким образом в ядре не должно быть ссылок на библиотеку System.Windows.Forms, но зато будет ссылка на UserInterfaceWinForms. Создать сборку (sln файл) с двумя проектами.

2. Реализовать интерфейс с использвоанием компонентов DevExpress (https://www.devexpress.com/ тут можно скачать демо версию) в отдельном проекте UserInterfaceDevExpress. Создать отдельную сборку с двумя проектами (Core и UserInterfaceDevExpress).

